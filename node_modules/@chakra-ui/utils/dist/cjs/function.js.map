{"version":3,"sources":["../../src/function.ts"],"names":["runIfFn","valueOrFn","args","callAllHandlers","fns","func","event","some","fn","defaultPrevented","callAll","mergedFn","arg","forEach","compose","fn1","reduce","f1","f2","once","result","apply","noop","warn","options","condition","message","__DEV__","console","error","promiseMicrotask","callback","Promise","resolve","then","scheduleMicrotask","__TEST__","queueMicrotask"],"mappings":"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","sourcesContent":["/* eslint-disable no-nested-ternary */\nimport { isFunction, __DEV__, __TEST__ } from \"./assertion\"\nimport { AnyFunction, FunctionArguments } from \"./types\"\n\nexport function runIfFn<T, U>(\n  valueOrFn: T | ((...fnArgs: U[]) => T),\n  ...args: U[]\n): T {\n  return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn\n}\n\nexport function callAllHandlers<T extends (event: any) => void>(\n  ...fns: (T | undefined)[]\n) {\n  return function func(event: FunctionArguments<T>[0]) {\n    fns.some((fn) => {\n      fn?.(event)\n      return event?.defaultPrevented\n    })\n  }\n}\n\nexport function callAll<T extends AnyFunction>(...fns: (T | undefined)[]) {\n  return function mergedFn(arg: FunctionArguments<T>[0]) {\n    fns.forEach((fn) => {\n      fn?.(arg)\n    })\n  }\n}\n\nexport const compose = <T>(\n  fn1: (...args: T[]) => T,\n  ...fns: Array<(...args: T[]) => T>\n) => fns.reduce((f1, f2) => (...args) => f1(f2(...args)), fn1)\n\nexport function once<T extends AnyFunction>(fn?: T | null) {\n  let result: any\n\n  return function func(this: any, ...args: Parameters<T>) {\n    if (fn) {\n      result = fn.apply(this, args)\n      fn = null\n    }\n\n    return result\n  }\n}\n\nexport const noop = () => {}\n\ntype MessageOptions = {\n  condition: boolean\n  message: string\n}\n\nexport const warn = once((options: MessageOptions) => () => {\n  const { condition, message } = options\n  if (condition && __DEV__) {\n    console.warn(message)\n  }\n})\n\nexport const error = once((options: MessageOptions) => () => {\n  const { condition, message } = options\n  if (condition && __DEV__) {\n    console.error(message)\n  }\n})\n\nconst promiseMicrotask = (callback: VoidFunction) => {\n  Promise.resolve().then(callback)\n}\n\nexport const scheduleMicrotask = __TEST__\n  ? (fn: VoidFunction) => fn()\n  : typeof queueMicrotask === \"function\"\n  ? queueMicrotask\n  : promiseMicrotask\n"],"file":"function.js"}