{"version":3,"sources":["../../src/use-popover.ts"],"names":["useDisclosure","useFocusOnHide","useFocusOnPointerDown","useFocusOnShow","useIds","popperCSSVars","usePopper","mergeRefs","callAllHandlers","contains","getOwnerDocument","getRelatedTarget","isBrowser","px","useCallback","useEffect","useRef","useState","TRIGGER","click","hover","usePopover","props","closeOnBlur","closeOnEsc","initialFocusRef","placement","placementProp","flip","gutter","id","returnFocusOnClose","autoFocus","arrowSize","arrowShadowColor","modifiers","trigger","openDelay","closeDelay","isLazy","isOpen","onClose","onOpen","onToggle","triggerRef","popoverRef","isHoveringRef","hasHeader","setHasHeader","hasBody","setHasBody","triggerId","popoverId","headerId","bodyId","popper","doc","current","elements","focusRef","visible","shouldFocus","getPopoverProps","_ref","popoverProps","style","transformOrigin","varRef","ref","children","tabIndex","role","onKeyDown","event","key","onBlur","relatedTarget","targetIsPopover","targetIsTrigger","isValidBlur","undefined","onMouseEnter","onMouseLeave","setTimeout","getPopoverPositionerProps","popperRef","var","visibility","openTimeout","closeTimeout","getTriggerProps","triggerProps","referenceRef","onClick","onFocus","window","clearTimeout","getHeaderProps","node","getBodyProps","forceUpdate","getArrowProps","getArrowInnerProps"],"mappings":"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","sourcesContent":["import {\n  useDisclosure,\n  useFocusOnHide,\n  useFocusOnPointerDown,\n  useFocusOnShow,\n  useIds,\n} from \"@chakra-ui/hooks\"\nimport {\n  Placement,\n  popperCSSVars,\n  usePopper,\n  UsePopperProps,\n} from \"@chakra-ui/popper\"\nimport { HTMLProps, mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  callAllHandlers,\n  contains,\n  FocusableElement,\n  getOwnerDocument,\n  getRelatedTarget,\n  isBrowser,\n  px,\n} from \"@chakra-ui/utils\"\nimport { RefObject, useCallback, useEffect, useRef, useState } from \"react\"\n\nconst TRIGGER = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-decribedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: RefObject<FocusableElement>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   */\n  autoFocus?: boolean\n  /**\n   * The gap (in pixels) to apply between the popover and the target.\n   * Used by `popper.js`\n   */\n  gutter?: number\n  /**\n   * The placement of the popover\n   */\n  placement?: Placement\n  /**\n   * The flip of the popover\n   */\n  flip?: boolean\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The Popper.js modifiers to use.\n   */\n  modifiers?: UsePopperProps[\"modifiers\"]\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   */\n  trigger?: keyof typeof TRIGGER\n  openDelay?: number\n  closeDelay?: number\n  /**\n   * Performance 🚀:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n}\n\n/**\n * @internal\n */\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    placement: placementProp,\n    flip,\n    gutter,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    modifiers,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const [hasHeader, setHasHeader] = useState(false)\n  const [hasBody, setHasBody] = useState(false)\n\n  const [triggerId, popoverId, headerId, bodyId] = useIds(\n    id,\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  )\n\n  const popper = usePopper({\n    placement: placementProp,\n    flip,\n    gutter,\n    modifiers,\n  })\n\n  useFocusOnPointerDown({\n    doc: isBrowser ? getOwnerDocument(triggerRef.current) : null,\n    elements: [triggerRef],\n  })\n\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click,\n  })\n\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click,\n  })\n\n  const getPopoverProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const popoverProps: HTMLProps = {\n        ...props,\n        style: {\n          ...props.style,\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n        },\n        ref: mergeRefs(popoverRef, _ref),\n        children: !isLazy || isOpen ? props.children : null,\n        id: popoverId,\n        tabIndex: -1,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        onBlur: callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const targetIsPopover = contains(popoverRef.current, relatedTarget)\n          const targetIsTrigger = contains(triggerRef.current, relatedTarget)\n          const isValidBlur = !targetIsPopover && !targetIsTrigger\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        }),\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n          setTimeout(onClose, closeDelay)\n        })\n      }\n\n      return popoverProps\n    },\n    [\n      isLazy,\n      isOpen,\n      popoverId,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      closeOnEsc,\n      onClose,\n      closeDelay,\n      closeOnBlur,\n    ],\n  )\n\n  const getPopoverPositionerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => ({\n      ...props,\n      ref: mergeRefs(popper.popperRef, _ref),\n      style: {\n        ...props.style,\n        [popperCSSVars.arrowSize.var]: arrowSize ? px(arrowSize) : undefined,\n        [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n        visibility: isOpen ? \"visible\" : \"hidden\",\n      },\n    }),\n    [arrowShadowColor, arrowSize, isOpen, popper.popperRef],\n  )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps: HTMLProps = {\n        ...props,\n        ref: mergeRefs(triggerRef, _ref, popper.referenceRef),\n        id: triggerId,\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen)\n        triggerProps.onBlur = callAllHandlers(props.onBlur, onClose)\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            onClose()\n          }\n        })\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(onOpen, openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      triggerId,\n      isOpen,\n      popoverId,\n      trigger,\n      popper.referenceRef,\n      onToggle,\n      onOpen,\n      onClose,\n      openDelay,\n      closeDelay,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current)\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current)\n      }\n    }\n  }, [])\n\n  const getHeaderProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: headerId,\n      ref: mergeRefs(ref, (node: HTMLElement | null) => {\n        setHasHeader(!!node)\n      }),\n    }),\n    [headerId],\n  )\n\n  const getBodyProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: bodyId,\n      ref: mergeRefs(ref, (node) => {\n        setHasBody(!!node)\n      }),\n    }),\n    [bodyId],\n  )\n\n  return {\n    forceUpdate: popper.forceUpdate,\n    isOpen,\n    onClose,\n    getArrowProps: popper.getArrowProps,\n    getArrowInnerProps: popper.getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n"],"file":"use-popover.js"}