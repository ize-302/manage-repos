import { ChakraTheme, Theme } from "@chakra-ui/theme";
declare type CloneKey<Target, Key> = Key extends keyof Target ? Target[Key] : unknown;
/**
 * Represents a loose but specific type for the theme override.
 * It provides autocomplete hints for extending the theme, but leaves room
 * for adding properties.
 */
declare type DeepThemeExtension<BaseTheme, ThemeType> = {
    [Key in keyof BaseTheme]?: BaseTheme[Key] extends (...args: any[]) => any ? DeepThemeExtension<Partial<ReturnType<BaseTheme[Key]>>, CloneKey<ThemeType, Key>> : BaseTheme[Key] extends Array<any> ? CloneKey<ThemeType, Key> : BaseTheme[Key] extends object ? DeepThemeExtension<Partial<BaseTheme[Key]>, CloneKey<ThemeType, Key>> : CloneKey<ThemeType, Key>;
};
export declare type ThemeOverride = Partial<ChakraTheme> & DeepThemeExtension<Theme, ChakraTheme>;
/**
 * Function to override or customize the Chakra UI theme conveniently
 * @param overrides - Your custom theme object overrides
 * @param baseTheme - theme to customize
 */
export declare function extendTheme<BaseTheme extends ChakraTheme = Theme, Overrides extends ThemeOverride = ThemeOverride>(overrides: Overrides, baseTheme?: BaseTheme): BaseTheme & Overrides;
export {};
//# sourceMappingURL=extend-theme.d.ts.map