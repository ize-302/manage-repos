{"version":3,"sources":["../../src/use-checkbox-group.ts"],"names":["useCheckboxGroup","props","defaultValue","valueProp","value","onChange","isNative","onChangeProp","setValue","handleChange","eventOrValue","isChecked","target","checked","includes","selectedValue","nextValue","getCheckboxProps","checkedKey"],"mappings":";;;;;AAAA;;AACA;;AAOA;;;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,gBAAT,CAA0BC,KAA1B,EAA6D;AAAA,MAAnCA,KAAmC;AAAnCA,IAAAA,KAAmC,GAAJ,EAAI;AAAA;;AAAA,eACHA,KADG;AAAA,MAC1DC,YAD0D,UAC1DA,YAD0D;AAAA,MACrCC,SADqC,UAC5CC,KAD4C;AAAA,MAC1BC,QAD0B,UAC1BA,QAD0B;AAAA,MAChBC,QADgB,UAChBA,QADgB;AAGlE,MAAMC,YAAY,GAAG,2BAAeF,QAAf,CAArB;;AAHkE,8BAKxC,iCAAqB;AAC7CD,IAAAA,KAAK,EAAED,SADsC;AAE7CD,IAAAA,YAAY,EAAEA,YAAY,IAAI,EAFe;AAG7CG,IAAAA,QAAQ,EAAEE;AAHmC,GAArB,CALwC;AAAA,MAK3DH,KAL2D;AAAA,MAKpDI,QALoD;;AAWlE,MAAMC,YAAY,GAAG,wBACnB,UAACC,YAAD,EAAgC;AAC9B,QAAI,CAACN,KAAL,EAAY;AAEZ,QAAMO,SAAS,GAAG,yBAAaD,YAAb,IACdA,YAAY,CAACE,MAAb,CAAoBC,OADN,GAEd,CAACT,KAAK,CAACU,QAAN,CAAeJ,YAAf,CAFL;AAIA,QAAMK,aAAa,GAAG,yBAAaL,YAAb,IAClBA,YAAY,CAACE,MAAb,CAAoBR,KADF,GAElBM,YAFJ;AAIA,QAAMM,SAAS,GAAGL,SAAS,GACvB,oBAAQP,KAAR,EAAeW,aAAf,CADuB,GAEvB,uBAAWX,KAAX,EAAkBW,aAAlB,CAFJ;AAIAP,IAAAA,QAAQ,CAACQ,SAAD,CAAR;AACD,GAjBkB,EAkBnB,CAACR,QAAD,EAAWJ,KAAX,CAlBmB,CAArB;AAqBA,MAAMa,gBAAgB,GAAG,wBACvB,UAAChB,KAAD,EAAsB;AAAA;;AAAA,QAArBA,KAAqB;AAArBA,MAAAA,KAAqB,GAAP,EAAO;AAAA;;AACpB,QAAMiB,UAAU,GAAGZ,QAAQ,GAAG,SAAH,GAAe,WAA1C;AACA,wBACKL,KADL,6BAEGiB,UAFH,IAEgBd,KAAK,CAACU,QAAN,CAAeb,KAAK,CAACG,KAArB,CAFhB,YAGEC,QAHF,GAGYI,YAHZ;AAKD,GARsB,EASvB,CAACA,YAAD,EAAeH,QAAf,EAAyBF,KAAzB,CATuB,CAAzB;AAYA,SAAO;AACLA,IAAAA,KAAK,EAALA,KADK;AAELC,IAAAA,QAAQ,EAAEI,YAFL;AAGLD,IAAAA,QAAQ,EAARA,QAHK;AAILS,IAAAA,gBAAgB,EAAhBA;AAJK,GAAP;AAMD","sourcesContent":["import { useCallbackRef, useControllableState } from \"@chakra-ui/hooks\"\nimport {\n  addItem,\n  Dict,\n  removeItem,\n  StringOrNumber,\n  isInputEvent,\n} from \"@chakra-ui/utils\"\nimport { ChangeEvent, useCallback } from \"react\"\n\ntype EventOrValue = ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseCheckboxGroupProps {\n  /**\n   * The value of the checkbox group\n   */\n  value?: StringOrNumber[]\n  /**\n   * The initial value of the checkbox group\n   */\n  defaultValue?: StringOrNumber[]\n  /**\n   * The callback fired when any children Checkbox is checked or unchecked\n   */\n  onChange?(value: StringOrNumber[]): void\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\nexport function useCheckboxGroup(props: UseCheckboxGroupProps = {}) {\n  const { defaultValue, value: valueProp, onChange, isNative } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp,\n  })\n\n  const handleChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      if (!value) return\n\n      const isChecked = isInputEvent(eventOrValue)\n        ? eventOrValue.target.checked\n        : !value.includes(eventOrValue)\n\n      const selectedValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      const nextValue = isChecked\n        ? addItem(value, selectedValue)\n        : removeItem(value, selectedValue)\n\n      setValue(nextValue)\n    },\n    [setValue, value],\n  )\n\n  const getCheckboxProps = useCallback(\n    (props: Dict = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        [checkedKey]: value.includes(props.value),\n        onChange: handleChange,\n      }\n    },\n    [handleChange, isNative, value],\n  )\n\n  return {\n    value,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps,\n  }\n}\n\nexport type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>\n"],"file":"use-checkbox-group.js"}