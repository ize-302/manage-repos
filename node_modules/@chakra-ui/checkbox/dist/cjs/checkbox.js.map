{"version":3,"sources":["../../src/checkbox.tsx"],"names":["CheckboxControl","baseStyle","display","alignItems","justifyContent","verticalAlign","userSelect","flexShrink","Label","cursor","position","_disabled","Checkbox","props","ref","group","mergedProps","styles","ownProps","spacing","className","children","iconColor","iconSize","icon","isCheckedProp","isChecked","onChangeProp","onChange","rest","value","includes","state","getInputProps","getCheckboxProps","getLabelProps","getRootProps","iconStyles","React","useMemo","opacity","isIndeterminate","transform","transition","fontSize","color","clonedIcon","cloneElement","__css","container","control","marginStart","label","__DEV__","displayName"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  PropsOf,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { callAll, cx, Omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-group\"\nimport { CheckboxIcon } from \"./checkbox-icon\"\nimport { useCheckbox, UseCheckboxProps } from \"./use-checkbox\"\n\nconst CheckboxControl = chakra(\"span\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0,\n  },\n})\n\nconst Label = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\",\n    },\n  },\n})\n\ntype CheckboxControlProps = Omit<HTMLChakraProps<\"div\">, keyof UseCheckboxProps>\n\ntype BaseInputProps = Pick<\n  PropsOf<\"input\">,\n  \"onBlur\" | \"checked\" | \"defaultChecked\"\n>\n\nexport interface CheckboxProps\n  extends CheckboxControlProps,\n    BaseInputProps,\n    ThemingProps<\"Checkbox\">,\n    UseCheckboxProps {\n  /**\n   * The spacing between the checkbox and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n  /**\n   * The color of the checkbox icon when checked or indeterminate\n   */\n  iconColor?: string\n  /**\n   * The size of the checkbox icon when checked or indeterminate\n   */\n  iconSize?: string | number\n  /**\n   * The checked icon to use\n   *\n   * @type React.ReactElement\n   * @default CheckboxIcon\n   */\n  icon?: React.ReactElement\n}\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox\n */\nexport const Checkbox = forwardRef<CheckboxProps, \"input\">((props, ref) => {\n  const group = useCheckboxGroupContext()\n\n  const mergedProps = { ...group, ...props } as CheckboxProps\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps)\n\n  const ownProps = omitThemingProps(props)\n\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = <CheckboxIcon />,\n    isChecked: isCheckedProp,\n    onChange: onChangeProp,\n    ...rest\n  } = ownProps\n\n  let isChecked = isCheckedProp\n  if (group?.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value)\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps,\n  } = useCheckbox({\n    ...rest,\n    isChecked,\n    onChange,\n  })\n\n  const iconStyles: SystemStyleObject = React.useMemo(\n    () => ({\n      opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n      transform:\n        state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n      transition: \"transform 200ms\",\n      fontSize: iconSize,\n      color: iconColor,\n      ...styles.icon,\n    }),\n    [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles.icon],\n  )\n\n  const clonedIcon = React.cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked,\n  })\n\n  return (\n    <Label\n      __css={styles.container}\n      className={cx(\"chakra-checkbox\", className)}\n      {...getRootProps()}\n    >\n      <input className=\"chakra-checkbox__input\" {...getInputProps({}, ref)} />\n      <CheckboxControl\n        __css={styles.control}\n        className=\"chakra-checkbox__control\"\n        {...getCheckboxProps()}\n      >\n        {clonedIcon}\n      </CheckboxControl>\n      {children && (\n        <chakra.span\n          className=\"chakra-checkbox__label\"\n          {...getLabelProps()}\n          __css={{\n            marginStart: spacing,\n            ...styles.label,\n          }}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </Label>\n  )\n})\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\"\n}\n"],"file":"checkbox.js"}