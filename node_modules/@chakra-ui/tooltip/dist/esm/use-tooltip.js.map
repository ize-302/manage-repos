{"version":3,"sources":["../../src/use-tooltip.ts"],"names":["useDisclosure","useEventListener","useId","usePopper","popperCSSVars","callAllHandlers","px","mergeRefs","React","useTooltip","props","openDelay","closeDelay","closeOnClick","closeOnMouseDown","onOpen","onOpenProp","onClose","onCloseProp","placement","id","isOpen","isOpenProp","defaultIsOpen","arrowSize","arrowShadowColor","arrowPadding","modifiers","isDisabled","gutter","offset","htmlProps","popper","tooltipId","ref","useRef","enterTimeout","exitTimeout","openWithDelay","useCallback","current","window","setTimeout","closeWithDelay","clearTimeout","onClick","onMouseDown","onKeyDown","event","key","useEffect","getTriggerProps","_ref","triggerProps","referenceRef","onMouseEnter","onFocus","onBlur","undefined","getTooltipPositionerProps","style","var","popperRef","getTooltipProps","tooltipProps","role","position","transformOrigin","varRef","show","hide"],"mappings":"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","sourcesContent":["import { useDisclosure, useEventListener, useId } from \"@chakra-ui/hooks\"\nimport {\n  Placement,\n  usePopper,\n  UsePopperProps,\n  popperCSSVars,\n} from \"@chakra-ui/popper\"\nimport { callAllHandlers, px } from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface UseTooltipProps\n  extends Pick<\n    UsePopperProps,\n    \"modifiers\" | \"gutter\" | \"offset\" | \"arrowPadding\"\n  > {\n  /**\n   * Delay (in ms) before showing the tooltip\n   * @default 0ms\n   */\n  openDelay?: number\n  /**\n   * Delay (in ms) before hiding the tooltip\n   * @default 0ms\n   */\n  closeDelay?: number\n  /**\n   * If `true`, the tooltip will hide on click\n   */\n  closeOnClick?: boolean\n  /**\n   * If `true`, the tooltip will hide while the mouse\n   * is down\n   */\n  closeOnMouseDown?: boolean\n  /**\n   * Callback to run when the tooltip shows\n   */\n  onOpen?(): void\n  /**\n   * Callback to run when the tooltip hides\n   */\n  onClose?(): void\n  /**\n   * The Popper.js placement of the tooltip\n   */\n  placement?: Placement\n  /**\n   * Custom `id` to use in place of `uuid`\n   */\n  id?: string\n  /**\n   * If `true`, the tooltip will be shown (in controlled mode)\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the tooltip will be initially shown\n   */\n  defaultIsOpen?: boolean\n  isDisabled?: boolean\n  arrowSize?: number\n  arrowShadowColor?: string\n}\n\nexport function useTooltip(props: UseTooltipProps = {}) {\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    ...htmlProps\n  } = props\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n  })\n\n  const popper = usePopper({\n    placement,\n    arrowPadding,\n    modifiers,\n    gutter,\n    offset,\n  })\n\n  const tooltipId = useId(id, \"tooltip\")\n\n  const ref = React.useRef<any>(null)\n\n  const enterTimeout = React.useRef<number>()\n  const exitTimeout = React.useRef<number>()\n\n  const openWithDelay = React.useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = window.setTimeout(onOpen, openDelay)\n    }\n  }, [isDisabled, onOpen, openDelay])\n\n  const closeWithDelay = React.useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current)\n    }\n    exitTimeout.current = window.setTimeout(onClose, closeDelay)\n  }, [closeDelay, onClose])\n\n  const onClick = React.useCallback(() => {\n    if (closeOnClick) {\n      closeWithDelay()\n    }\n  }, [closeOnClick, closeWithDelay])\n\n  const onMouseDown = React.useCallback(() => {\n    if (closeOnMouseDown) {\n      closeWithDelay()\n    }\n  }, [closeOnMouseDown, closeWithDelay])\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay()\n    }\n  }\n\n  useEventListener(\"keydown\", onKeyDown)\n\n  React.useEffect(\n    () => () => {\n      clearTimeout(enterTimeout.current)\n      clearTimeout(exitTimeout.current)\n    },\n    [],\n  )\n\n  /**\n   * This allows for catching mouseleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onMouseLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n  useEventListener(\"mouseleave\", closeWithDelay, ref.current)\n\n  const getTriggerProps: PropGetter = React.useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps = {\n        ...props,\n        ref: mergeRefs(ref, _ref, popper.referenceRef),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, openWithDelay),\n        onClick: callAllHandlers(props.onClick, onClick),\n        onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n        onFocus: callAllHandlers(props.onFocus, openWithDelay),\n        onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n        \"aria-describedby\": isOpen ? tooltipId : undefined,\n      }\n\n      return triggerProps\n    },\n    [\n      openWithDelay,\n      closeWithDelay,\n      onMouseDown,\n      isOpen,\n      tooltipId,\n      onClick,\n      popper,\n    ],\n  )\n\n  const getTooltipPositionerProps: PropGetter = React.useCallback(\n    (props = {}, _ref = null) => {\n      return {\n        ...props,\n        style: {\n          ...props.style,\n          [popperCSSVars.arrowSize.var]: px(arrowSize),\n          [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n        },\n        ref: mergeRefs(_ref, popper.popperRef),\n      }\n    },\n    [popper, arrowSize, arrowShadowColor],\n  )\n\n  const getTooltipProps = React.useCallback(\n    (props = {}, _ref = null) => {\n      const tooltipProps = {\n        ref: _ref,\n        ...htmlProps,\n        ...props,\n        id: tooltipId,\n        role: \"tooltip\",\n        style: {\n          ...props.style,\n          position: \"relative\",\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n        },\n      }\n\n      return tooltipProps\n    },\n    [htmlProps, tooltipId],\n  )\n\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps,\n  }\n}\n\nexport type UseTooltipReturn = ReturnType<typeof useTooltip>\n"],"file":"use-tooltip.js"}